//SPDX-License-Identifier:MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract Vulnerability {
    address private USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    mapping(address => uint256) public balances;
    uint256 public lotteryWinningNumber;
    address public owner;

    constructor(){
        owner = msg.sender;
    }

    //Two vulnerabilities are present in this function. Using strict equality is a vulnerability.
    //The second vulnerability is that address(this).balance can be manipulated by
    //the function "kill" by forcibly sending funds into a contract that doesn't
    //need to have a receive function
    function fund_reached() public view returns (bool) {
        return address(this).balance == 100 ether;
    }

    //_from field is dangerous to use in this case because if Person A (_from) has given allowance 
    //to this contract for some amount of tokens, Person B (_to) can easily transfer those tokens to their own account
    function USDCTransfer(
        address _from,
        address _to,
        uint256 _amount
    ) public {
        IERC20(USDC).transferFrom(_from, _to, _amount);
    }

    //Anyone can run this function and claim any funds to their own address
    function kill() public {
        selfdestruct(payable(msg.sender));
    }

    //Using delegate should only be done on trusted contracts. So _to address should not be given here.
    //Part of good auditing practice is reviewing your code and double-checking low-level calls,
    //however Slither does that for you.
    function delegate(address _to, bytes memory _data) public {
        (bool result, ) = _to.delegatecall(_data);
    }

    //Reentrancy attack. Balances variable is being updated after external call transfer here.
    //It would be in good practice to use checks-effects-interactions (CEI) pattern
    //to avoid this vulnerability.
    function withdraw(uint256 _amount) public {
        if (balances[msg.sender] >= _amount) {
            (bool result, ) = msg.sender.call{value: _amount}("");
            require(result, "Could not transfer");
            balances[msg.sender] -= _amount;
        }
    }

    //The usage of block.timestamp allows this function to be manipulated by miners, and should be avoided.
    //Blockhash and now in random number generation is highly discouraged. Use of Chainlink VRF is preferred.
    function winLottery() external{
      lotteryWinningNumber = uint256(block.timestamp) % 10;
    }

    uint256 amt;
    //Dividing first can cause serious problems if b is greater than a.
    //So always multiply first and then divide
    function divideBeforeMultiply(uint256 a, uint256 b, uint256 c) public{
        amt = (a / b) * c;
    }

    //Avoid usage of Tx.origin, as this can expose the contract to phishing attacks.
    function txOriginExploit(uint256 _amount) public{
        require(tx.origin == owner);
        withdraw(_amount);
    }

    //Since "to" is not initialized, it will be 0x0 address. As a result, all money will be lost (burning).
    //Slither will throw a warning anytime it sees a low-level call and recommend you verify 
    //the function parameters
    function transferMoney() payable public{
        address to;
        (bool result, ) = to.call{value: address(this).balance}("");
        require(result, "Could not transfer");
    }


    //The below shows the incorrect usage of storage and memory variables
    uint[1] public x; // storage

    function f() public {
        f1(x); // update x
        f2(x); // do not update x
    }

    function f1(uint[1] storage arr) internal{ // by reference
        arr[0] = 1;
    }

    function f2(uint[1] memory arr) internal pure{ // by value
        arr[0] = 2;
    }
}
